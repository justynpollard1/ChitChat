{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/dustin/CMPT436/project-parse/components/CurrentChatsScroll.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Context from \"../contextAPI/context\";\nimport { TouchableOpacity } from 'react-native-gesture-handler';\nimport ChatRoomCard from \"./ChatRoomCard\";\nimport { Parse } from \"parse/react-native\";\n\nvar CurrentChatsScroll = function (_React$Component) {\n  _inherits(CurrentChatsScroll, _React$Component);\n\n  var _super = _createSuper(CurrentChatsScroll);\n\n  function CurrentChatsScroll(props) {\n    var _this;\n\n    _classCallCheck(this, CurrentChatsScroll);\n\n    _this = _super.call(this, props);\n\n    _this.getSingleUserChatRooms = function _callee() {\n      var oldData, currentUserID, userQuery, userQueryResult, arrayChatRoomIDs, arrayLength, i, otherUsersNames, chatRoomQuery, chatRoomQueryResult, userIdArray, messagesFromChatRoom, userIDArrayLength, _i, otherUserQueryResult, newData;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this.setState({\n                roomData: []\n              });\n\n              oldData = _this.state.roomData;\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(Parse.User.current().id);\n\n            case 4:\n              currentUserID = _context.sent;\n              userQuery = new Parse.Query(Parse.Object.extend(\"User\"));\n              _context.next = 8;\n              return _regeneratorRuntime.awrap(userQuery.get(currentUserID));\n\n            case 8:\n              userQueryResult = _context.sent;\n              arrayChatRoomIDs = userQueryResult.get('ChatRooms');\n              arrayLength = arrayChatRoomIDs.length;\n              i = 0;\n\n            case 12:\n              if (!(i < arrayLength)) {\n                _context.next = 35;\n                break;\n              }\n\n              otherUsersNames = [];\n              chatRoomQuery = new Parse.Query(Parse.Object.extend(\"ChatRooms\"));\n              _context.next = 17;\n              return _regeneratorRuntime.awrap(chatRoomQuery.get(arrayChatRoomIDs[i]));\n\n            case 17:\n              chatRoomQueryResult = _context.sent;\n              userIdArray = chatRoomQueryResult.get('users').filter(function (uid) {\n                return uid !== currentUserID;\n              });\n              messagesFromChatRoom = chatRoomQueryResult.get('messages');\n              userIDArrayLength = userIdArray.length;\n              _i = 0;\n\n            case 22:\n              if (!(_i < userIDArrayLength)) {\n                _context.next = 31;\n                break;\n              }\n\n              if (!(userIdArray[_i] !== undefined)) {\n                _context.next = 28;\n                break;\n              }\n\n              _context.next = 26;\n              return _regeneratorRuntime.awrap(userQuery.get(userIdArray[_i]));\n\n            case 26:\n              otherUserQueryResult = _context.sent;\n              otherUsersNames.push(otherUserQueryResult.get('name'));\n\n            case 28:\n              _i++;\n              _context.next = 22;\n              break;\n\n            case 31:\n              if (otherUsersNames.length > 0) {\n                newData = {\n                  roomID: arrayChatRoomIDs[i],\n                  otherUserName: otherUsersNames.toString()\n                };\n\n                if (messagesFromChatRoom.length > 0) {\n                  newData.lastMsg = messagesFromChatRoom[messagesFromChatRoom.length - 1].msg;\n                }\n\n                oldData.push(newData);\n              }\n\n            case 32:\n              i++;\n              _context.next = 12;\n              break;\n\n            case 35:\n              _this.setState({\n                roomData: oldData\n              });\n\n            case 36:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.chatObserver = function () {\n      var subscription = _this.state.queryClient.subscribe(_this.state.liveQuery);\n\n      subscription.on('update', function (object) {\n        _this.getSingleUserChatRooms();\n      });\n    };\n\n    _this.state = {\n      roomData: [],\n      queryClient: \"\",\n      liveQuery: \"\"\n    };\n    var liveQueryClient = new Parse.LiveQueryClient({\n      applicationId: 'kYSoaP9C7d9JujPHMbZ4AIhtBTmmDIevX42cMQG6',\n      serverURL: 'wss://' + 'chitchat.b4a.io',\n      javascriptKey: 'V1eJ6EjksQ6B95OJzOjTQBu0BNFjJIVw2YSkp9BS'\n    });\n    liveQueryClient.open();\n    _this.state.queryClient = liveQueryClient;\n    _this.state.liveQuery = new Parse.Query(\"ChatRooms\");\n    return _this;\n  }\n\n  _createClass(CurrentChatsScroll, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getSingleUserChatRooms();\n      this.chatObserver();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.state.queryClient.unsubscribe(this.state.liveQuery);\n      this.getSingleUserChatRooms();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(ScrollView, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }\n      }, React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 17\n        }\n      }, this.state.roomData.map(function (info) {\n        return React.createElement(ChatRoomCard, {\n          navigation: _this2.props.navigation,\n          roomID: info.roomID,\n          otherUserName: info.otherUserName,\n          lastMsg: info.lastMsg,\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 25\n          }\n        });\n      })));\n    }\n  }]);\n\n  return CurrentChatsScroll;\n}(React.Component);\n\nCurrentChatsScroll.contextType = Context;\nexport default CurrentChatsScroll;","map":{"version":3,"sources":["/home/dustin/CMPT436/project-parse/components/CurrentChatsScroll.js"],"names":["React","Context","TouchableOpacity","ChatRoomCard","Parse","CurrentChatsScroll","props","getSingleUserChatRooms","setState","roomData","oldData","state","User","current","id","currentUserID","userQuery","Query","Object","extend","get","userQueryResult","arrayChatRoomIDs","arrayLength","length","i","otherUsersNames","chatRoomQuery","chatRoomQueryResult","userIdArray","filter","uid","messagesFromChatRoom","userIDArrayLength","undefined","otherUserQueryResult","push","newData","roomID","otherUserName","toString","lastMsg","msg","chatObserver","subscription","queryClient","subscribe","liveQuery","on","object","liveQueryClient","LiveQueryClient","applicationId","serverURL","javascriptKey","open","unsubscribe","map","info","navigation","Component","contextType"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {View, ScrollView} from 'react-native';\nimport Context from '../contextAPI/context';\nimport { TouchableOpacity } from 'react-native-gesture-handler';\nimport ChatRoomCard from './ChatRoomCard';\nimport {Parse} from \"parse/react-native\";\n\nclass CurrentChatsScroll extends React.Component {\n    static contextType = Context\n    constructor(props) {\n        super(props)\n        this.state = {\n            roomData: [],\n            queryClient: \"\",\n            liveQuery: \"\",\n        }\n        let liveQueryClient = new Parse.LiveQueryClient({\n            applicationId: 'kYSoaP9C7d9JujPHMbZ4AIhtBTmmDIevX42cMQG6',\n            serverURL: 'wss://' + 'chitchat.b4a.io',\n            javascriptKey: 'V1eJ6EjksQ6B95OJzOjTQBu0BNFjJIVw2YSkp9BS'\n        });\n        liveQueryClient.open();\n        this.state.queryClient = liveQueryClient;\n        this.state.liveQuery = new Parse.Query(\"ChatRooms\");\n    }\n\n    componentDidMount() {\n        this.getSingleUserChatRooms();\n        this.chatObserver();\n    }\n\n    componentWillUnmount() {\n        this.state.queryClient.unsubscribe(this.state.liveQuery);\n        this.getSingleUserChatRooms();\n    }\n\n    getSingleUserChatRooms = async() => {\n        //reset the variable\n        this.setState({roomData: []})\n        const oldData = this.state.roomData\n\n        // get the current logged in objectId\n        const currentUserID = await Parse.User.current().id;\n\n        //query the cloud and get the array of all ChatRooms the user has\n        const userQuery = new Parse.Query(Parse.Object.extend(\"User\"));\n        const userQueryResult = await userQuery.get(currentUserID);\n        const arrayChatRoomIDs = userQueryResult.get('ChatRooms');\n\n\n\n        //go through the array of chatroomIDs assigned to the user, get the other user from the chatroom who arent current user\n        let arrayLength = arrayChatRoomIDs.length;\n        for(let i=0; i < arrayLength; i++){\n            let otherUsersNames = []\n            let chatRoomQuery = new Parse.Query(Parse.Object.extend(\"ChatRooms\"));\n            let chatRoomQueryResult = await chatRoomQuery.get(arrayChatRoomIDs[i]);\n            let userIdArray = chatRoomQueryResult.get('users').filter(uid => uid !== currentUserID);\n            let messagesFromChatRoom = chatRoomQueryResult.get('messages');\n\n            //create an array of names of the other users names\n            let userIDArrayLength = userIdArray.length;\n            for(let i=0;i < userIDArrayLength; i++){\n                //only get the names that are defined\n                if(userIdArray[i] !== undefined) {\n                    let otherUserQueryResult = await userQuery.get(userIdArray[i]);\n                    otherUsersNames.push(otherUserQueryResult.get('name'));\n                }\n            }\n\n            if(otherUsersNames.length > 0){\n                const newData = {\n                    roomID: arrayChatRoomIDs[i],\n                    otherUserName: otherUsersNames.toString(),\n                }\n                if(messagesFromChatRoom.length > 0) {\n                    newData.lastMsg = messagesFromChatRoom[messagesFromChatRoom.length - 1].msg\n                }\n                oldData.push(newData)\n            }\n\n        }\n        this.setState({roomData: oldData})\n    }\n\n\n\n    chatObserver = () => {\n        let subscription = this.state.queryClient.subscribe(this.state.liveQuery);\n        subscription.on('update', (object) =>{\n            this.getSingleUserChatRooms();\n        })\n    }\n\n\n    render() {\n        return (\n            <ScrollView>\n                <View>\n                    {this.state.roomData.map((info) => (\n                        <ChatRoomCard\n                        navigation={this.props.navigation}\n                        roomID={info.roomID}\n                        otherUserName={info.otherUserName}\n                        lastMsg={info.lastMsg}/>\n                    ))}\n                </View>\n            </ScrollView>\n        )\n    }\n}\n\nexport default CurrentChatsScroll\n"]},"metadata":{},"sourceType":"module"}