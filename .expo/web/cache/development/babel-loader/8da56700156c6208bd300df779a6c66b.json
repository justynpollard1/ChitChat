{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/dustin/CMPT436/project-parse/views/AddPersonToChat.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Context from \"../contextAPI/context\";\nimport { SearchBar } from \"react-native-elements\";\nimport GroupChatScroll from \"../components/userSearch/GroupChatScroll\";\n\nvar AddPersonToChat = function (_React$Component) {\n  _inherits(AddPersonToChat, _React$Component);\n\n  var _super = _createSuper(AddPersonToChat);\n\n  function AddPersonToChat(props) {\n    var _this;\n\n    _classCallCheck(this, AddPersonToChat);\n\n    _this = _super.call(this, props);\n\n    _this.searchForUser = function _callee() {\n      var usersFoundArray, strSearch, strlength, strFrontCode, strEndCode, startcode, endcode, query;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              usersFoundArray = [];\n              strSearch = _this.state.search;\n              strlength = strSearch.length;\n              strFrontCode = strSearch.slice(0, strlength - 1);\n              strEndCode = strSearch.slice(strlength - 1, strSearch.length);\n              startcode = strSearch;\n              endcode = strFrontCode + String.fromCharCode(strEndCode.charCodeAt(0) + 1);\n              _context.next = 9;\n              return _regeneratorRuntime.awrap(db.collection('users').where('name', '>=', startcode).where('name', '<', endcode).get());\n\n            case 9:\n              query = _context.sent;\n              query.forEach(function (user) {\n                usersFoundArray.push([user.data().name, user.data().UID]);\n              });\n              _context.next = 13;\n              return _regeneratorRuntime.awrap(new Promise(function (resolve) {\n                return _this.setState({\n                  usersFound: usersFoundArray\n                }, function () {\n                  return resolve();\n                });\n              }));\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.updateSearch = function (search) {\n      _this.setState({\n        search: search\n      });\n    };\n\n    _this.onCancelPressed = function () {\n      _this.setState({\n        searchBarShow: false,\n        search: ''\n      });\n    };\n\n    _this.state = {\n      searchBarShow: false,\n      search: '',\n      usersFound: [],\n      roomID: _this.props.route.params.roomID\n    };\n    return _this;\n  }\n\n  _createClass(AddPersonToChat, [{\n    key: \"userSearchBar\",\n    value: function userSearchBar() {\n      var search = this.state.search;\n      return React.createElement(SearchBar, {\n        platform: \"ios\",\n        placeholder: \"Search for User\",\n        onChangeText: this.updateSearch,\n        onSubmitEditing: this.searchForUser,\n        onCancel: this.onCancelPressed,\n        value: search,\n        autoCapitalize: \"none\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        style: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 9\n        }\n      }, this.userSearchBar(), React.createElement(GroupChatScroll, {\n        navigation: this.props.navigation,\n        usersFound: this.state.usersFound,\n        roomID: this.state.roomID,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }\n      }));\n    }\n  }]);\n\n  return AddPersonToChat;\n}(React.Component);\n\nAddPersonToChat.contextType = Context;\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white'\n  },\n  text: {\n    fontSize: 50,\n    color: 'blue'\n  },\n  input: {\n    bottom: 0,\n    fontSize: 50,\n    color: 'blue'\n  },\n  buttonText: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: 'black'\n  },\n  button: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: '#fff',\n    borderWidth: 5\n  }\n});\nexport default AddPersonToChat;","map":{"version":3,"sources":["/home/dustin/CMPT436/project-parse/views/AddPersonToChat.js"],"names":["React","Context","SearchBar","GroupChatScroll","AddPersonToChat","props","searchForUser","usersFoundArray","strSearch","state","search","strlength","length","strFrontCode","slice","strEndCode","startcode","endcode","String","fromCharCode","charCodeAt","db","collection","where","get","query","forEach","user","push","data","name","UID","Promise","resolve","setState","usersFound","updateSearch","onCancelPressed","searchBarShow","roomID","route","params","styles","container","userSearchBar","navigation","Component","contextType","StyleSheet","create","backgroundColor","text","fontSize","color","input","bottom","buttonText","fontWeight","button","borderWidth"],"mappings":";;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,OAAOC,OAAP;AACA,SAAQC,SAAR,QAAwB,uBAAxB;AACA,OAAOC,eAAP;;IAEMC,e;;;;;AAEF,2BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,8BAAMA,KAAN;;AADe,UAcnBC,aAdmB,GAcH;AAAA;AAAA;AAAA;AAAA;AAAA;AACNC,cAAAA,eADM,GACY,EADZ;AAERC,cAAAA,SAFQ,GAEI,MAAKC,KAAL,CAAWC,MAFf;AAGRC,cAAAA,SAHQ,GAGIH,SAAS,CAACI,MAHd;AAIRC,cAAAA,YAJQ,GAIOL,SAAS,CAACM,KAAV,CAAgB,CAAhB,EAAmBH,SAAS,GAAC,CAA7B,CAJP;AAKRI,cAAAA,UALQ,GAKKP,SAAS,CAACM,KAAV,CAAgBH,SAAS,GAAC,CAA1B,EAA6BH,SAAS,CAACI,MAAvC,CALL;AAORI,cAAAA,SAPQ,GAOIR,SAPJ;AAQRS,cAAAA,OARQ,GAQCJ,YAAY,GAAGK,MAAM,CAACC,YAAP,CAAoBJ,UAAU,CAACK,UAAX,CAAsB,CAAtB,IAA2B,CAA/C,CARhB;AAAA;AAAA,+CASQC,EAAE,CAACC,UAAH,CAAc,OAAd,EACfC,KADe,CACT,MADS,EACD,IADC,EACKP,SADL,EAEfO,KAFe,CAET,MAFS,EAED,GAFC,EAEIN,OAFJ,EAEaO,GAFb,EATR;;AAAA;AASNC,cAAAA,KATM;AAYZA,cAAAA,KAAK,CAACC,OAAN,CAAc,UAAAC,IAAI,EAAI;AAClBpB,gBAAAA,eAAe,CAACqB,IAAhB,CAAqB,CAACD,IAAI,CAACE,IAAL,GAAYC,IAAb,EAAmBH,IAAI,CAACE,IAAL,GAAYE,GAA/B,CAArB;AAEH,eAHD;AAZY;AAAA,+CAgBN,IAAIC,OAAJ,CAAY,UAAAC,OAAO;AAAA,uBAAI,MAAKC,QAAL,CAAc;AAACC,kBAAAA,UAAU,EAAE5B;AAAb,iBAAd,EAA6C;AAAA,yBAAM0B,OAAO,EAAb;AAAA,iBAA7C,CAAJ;AAAA,eAAnB,CAhBM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAdG;;AAAA,UAmCnBG,YAnCmB,GAmCJ,UAAA1B,MAAM,EAAI;AACrB,YAAKwB,QAAL,CAAc;AAAExB,QAAAA,MAAM,EAANA;AAAF,OAAd;AACH,KArCkB;;AAAA,UAwCnB2B,eAxCmB,GAwCD,YAAM;AACpB,YAAKH,QAAL,CAAc;AAACI,QAAAA,aAAa,EAAE,KAAhB;AAAuB5B,QAAAA,MAAM,EAAE;AAA/B,OAAd;AACH,KA1CkB;;AAEf,UAAKD,KAAL,GAAW;AACP6B,MAAAA,aAAa,EAAE,KADR;AAEP5B,MAAAA,MAAM,EAAE,EAFD;AAGPyB,MAAAA,UAAU,EAAE,EAHL;AAIPI,MAAAA,MAAM,EAAE,MAAKlC,KAAL,CAAWmC,KAAX,CAAiBC,MAAjB,CAAwBF;AAJzB,KAAX;AAFe;AAQlB;;;;WAqCD,yBAAgB;AAAA,UACL7B,MADK,GACK,KAAKD,KADV,CACLC,MADK;AAEZ,aACI,oBAAC,SAAD;AACI,QAAA,QAAQ,EAAC,KADb;AAEI,QAAA,WAAW,EAAC,iBAFhB;AAGI,QAAA,YAAY,EAAE,KAAK0B,YAHvB;AAII,QAAA,eAAe,EAAE,KAAK9B,aAJ1B;AAKI,QAAA,QAAQ,EAAE,KAAK+B,eALnB;AAMI,QAAA,KAAK,EAAE3B,MANX;AAOI,QAAA,cAAc,EAAC,MAPnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAWH;;;WAED,kBAAS;AACL,aACA,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEgC,MAAM,CAACC,SAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAGK,KAAKC,aAAL,EAHL,EAKI,oBAAC,eAAD;AAAiB,QAAA,UAAU,EAAE,KAAKvC,KAAL,CAAWwC,UAAxC;AACiB,QAAA,UAAU,EAAE,KAAKpC,KAAL,CAAW0B,UADxC;AAEiB,QAAA,MAAM,EAAE,KAAK1B,KAAL,CAAW8B,MAFpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALJ,CADA;AAcH;;;;EA7EyBvC,KAAK,CAAC8C,S;;AAA9B1C,e,CACK2C,W,GAAc9C,O;AA+EzB,IAAMyC,MAAM,GAAGM,UAAU,CAACC,MAAX,CAAkB;AAC7BN,EAAAA,SAAS,EAAE;AACPO,IAAAA,eAAe,EAAE;AADV,GADkB;AAI7BC,EAAAA,IAAI,EAAE;AACFC,IAAAA,QAAQ,EAAE,EADR;AAEFC,IAAAA,KAAK,EAAE;AAFL,GAJuB;AAQ7BC,EAAAA,KAAK,EAAE;AACHC,IAAAA,MAAM,EAAE,CADL;AAEHH,IAAAA,QAAQ,EAAE,EAFP;AAGHC,IAAAA,KAAK,EAAE;AAHJ,GARsB;AAa7BG,EAAAA,UAAU,EAAE;AACRJ,IAAAA,QAAQ,EAAE,EADF;AAERK,IAAAA,UAAU,EAAE,MAFJ;AAGRJ,IAAAA,KAAK,EAAE;AAHC,GAbiB;AAkB7BK,EAAAA,MAAM,EAAE;AACJN,IAAAA,QAAQ,EAAE,EADN;AAEJK,IAAAA,UAAU,EAAE,MAFR;AAGJJ,IAAAA,KAAK,EAAE,MAHH;AAIJM,IAAAA,WAAW,EAAE;AAJT;AAlBqB,CAAlB,CAAf;AA0BA,eAAevD,eAAf","sourcesContent":["import React from 'react';\nimport {StyleSheet, View} from 'react-native';\nimport Context from \"../contextAPI/context\";\nimport {SearchBar} from \"react-native-elements\";\nimport GroupChatScroll from \"../components/userSearch/GroupChatScroll\";\n\nclass AddPersonToChat extends React.Component{\n    static contextType = Context\n    constructor(props) {\n        super(props);\n        this.state={\n            searchBarShow: false,\n            search: '',\n            usersFound: [],\n            roomID: this.props.route.params.roomID\n        }\n    }\n\n\n\n\n    //gets search text and looks for users in db\n    searchForUser = async() => {\n        const usersFoundArray = []\n        var strSearch = this.state.search;\n        var strlength = strSearch.length;\n        var strFrontCode = strSearch.slice(0, strlength-1);\n        var strEndCode = strSearch.slice(strlength-1, strSearch.length);\n\n        var startcode = strSearch;\n        var endcode= strFrontCode + String.fromCharCode(strEndCode.charCodeAt(0) + 1);\n        const query = await db.collection('users')\n            .where('name', '>=', startcode)\n            .where('name', '<', endcode).get();\n        query.forEach(user => {\n            usersFoundArray.push([user.data().name, user.data().UID])\n\n        })\n        await new Promise(resolve => this.setState({usersFound: usersFoundArray}, () => resolve()))\n    }\n\n\n    //updates search bar text and search state\n    updateSearch = search => {\n        this.setState({ search });\n    };\n\n    //hides search bar and sets search to empty\n    onCancelPressed = () => {\n        this.setState({searchBarShow: false, search: ''})\n    }\n\n    //Search bar render\n    userSearchBar() {\n        const {search} = this.state;\n        return (\n            <SearchBar\n                platform=\"ios\"\n                placeholder=\"Search for User\"\n                onChangeText={this.updateSearch}\n                onSubmitEditing={this.searchForUser}\n                onCancel={this.onCancelPressed}\n                value={search}\n                autoCapitalize='none'\n            />\n        )\n    }\n\n    render() {\n        return(\n        <View style={styles.container}>\n\n            {/* display the search bar */}\n            {this.userSearchBar()}\n\n            <GroupChatScroll navigation={this.props.navigation}\n                             usersFound={this.state.usersFound}\n                             roomID={this.state.roomID}/>\n        </View>\n        )\n\n\n\n    }\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        backgroundColor: 'white',\n    },\n    text: {\n        fontSize: 50,\n        color: 'blue'\n    },\n    input: {\n        bottom: 0,\n        fontSize: 50,\n        color: 'blue'\n    },\n    buttonText: {\n        fontSize: 20,\n        fontWeight: 'bold',\n        color: 'black'\n    },\n    button: {\n        fontSize: 20,\n        fontWeight: 'bold',\n        color: '#fff',\n        borderWidth: 5\n    }\n});\n\nexport default AddPersonToChat;\n"]},"metadata":{},"sourceType":"module"}