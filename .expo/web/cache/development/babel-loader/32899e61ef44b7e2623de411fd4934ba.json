{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/dustin/CMPT436/project-parse/views/Auth.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { useContext } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport { TextInput } from 'react-native-gesture-handler';\nimport Context from \"../contextAPI/context\";\nimport { Parse } from \"parse/react-native\";\n\nvar Auth = function (_React$Component) {\n  _inherits(Auth, _React$Component);\n\n  var _super = _createSuper(Auth);\n\n  function Auth(navigation) {\n    var _this;\n\n    _classCallCheck(this, Auth);\n\n    _this = _super.call(this, navigation);\n    _this.state = {\n      email: '',\n      password: ''\n    };\n\n    _this.handleLogin = function _callee() {\n      var _this$state, email, password, objectId, user, query, queryResult, usersName, userData;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this$state = _this.state, email = _this$state.email, password = _this$state.password;\n\n              if (!(email.length === 0 || password.length === 0)) {\n                _context.next = 5;\n                break;\n              }\n\n              window.alert(\"Username or password cannot be blank\");\n              _context.next = 25;\n              break;\n\n            case 5:\n              _context.prev = 5;\n              _context.next = 8;\n              return _regeneratorRuntime.awrap(Parse.User.logIn(email.toString(), password.toString()));\n\n            case 8:\n              _context.next = 10;\n              return _regeneratorRuntime.awrap(Parse.User.current().id);\n\n            case 10:\n              objectId = _context.sent;\n              user = Parse.Object.extend(\"User\");\n              query = new Parse.Query(user);\n              _context.next = 15;\n              return _regeneratorRuntime.awrap(query.get(objectId));\n\n            case 15:\n              queryResult = _context.sent;\n              usersName = queryResult.get('name');\n              userData = {\n                name: usersName,\n                email: email,\n                password: password,\n                UID: objectId\n              };\n\n              _this.context.updateUserData(userData);\n\n              _this.props.navigation.replace('HomeStack', {\n                screen: 'Home'\n              });\n\n              _context.next = 25;\n              break;\n\n            case 22:\n              _context.prev = 22;\n              _context.t0 = _context[\"catch\"](5);\n              window.alert(\"LoginError: \" + _context.t0.message);\n\n            case 25:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[5, 22]], Promise);\n    };\n\n    return _this;\n  }\n\n  _createClass(Auth, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(View, {\n        style: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }\n      }, React.createElement(Text, {\n        style: styles.text,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 17\n        }\n      }, \"Login Screen\"), React.createElement(TextInput, {\n        style: styles.inputBox,\n        value: this.state.email,\n        onChangeText: function onChangeText(email) {\n          return _this2.setState({\n            email: email\n          });\n        },\n        placeholder: \"Email\",\n        autoCapitalize: \"none\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 17\n        }\n      }), React.createElement(TextInput, {\n        style: styles.inputBox,\n        value: this.state.password,\n        onChangeText: function onChangeText(password) {\n          return _this2.setState({\n            password: password\n          });\n        },\n        placeholder: \"Password\",\n        secureTextEntry: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 17\n        }\n      }), React.createElement(TouchableOpacity, {\n        style: styles.button,\n        onPress: this.handleLogin,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 17\n        }\n      }, React.createElement(Text, {\n        style: styles.buttonText,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }\n      }, \"Login\")), React.createElement(Button, {\n        title: \"signup\",\n        onPress: function onPress() {\n          return _this2.props.navigation.navigate('Signup');\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 17\n        }\n      }));\n    }\n  }]);\n\n  return Auth;\n}(React.Component);\n\nAuth.contextType = Context;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: 'center',\n    backgroundColor: 'white'\n  },\n  text: {\n    fontSize: 50,\n    color: 'blue'\n  },\n  button: {\n    marginTop: 30,\n    marginBottom: 20,\n    paddingVertical: 5,\n    alignItems: 'center',\n    backgroundColor: '#F6820D',\n    borderColor: '#F6820D',\n    borderWidth: 1,\n    borderRadius: 5,\n    width: 200\n  },\n  buttonText: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: '#fff'\n  },\n  inputBox: {\n    width: '85%',\n    margin: 10,\n    padding: 15,\n    fontSize: 16,\n    borderColor: '#d3d3d3',\n    borderBottomWidth: 1,\n    textAlign: 'center'\n  },\n  buttonSign: {\n    fontSize: 12\n  }\n});\n;\nexport default Auth;","map":{"version":3,"sources":["/home/dustin/CMPT436/project-parse/views/Auth.js"],"names":["React","useContext","TextInput","Context","Parse","Auth","navigation","state","email","password","handleLogin","length","window","alert","User","logIn","toString","current","id","objectId","user","Object","extend","query","Query","get","queryResult","usersName","userData","name","UID","context","updateUserData","props","replace","screen","message","styles","container","text","inputBox","setState","button","buttonText","navigate","Component","contextType","StyleSheet","create","flex","alignItems","justifyContent","backgroundColor","fontSize","color","marginTop","marginBottom","paddingVertical","borderColor","borderWidth","borderRadius","width","fontWeight","margin","padding","borderBottomWidth","textAlign","buttonSign"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react';\nimport { StyleSheet, Text, View, TouchableOpacity, Button} from 'react-native';\nimport { TextInput } from 'react-native-gesture-handler';\nimport Context from '../contextAPI/context';\nimport { Parse } from \"parse/react-native\";\n\nclass Auth extends React.Component {\n    state ={\n        email: '',\n        password: '',\n    }\n\n    constructor(navigation) {\n        super(navigation)\n    }\n\n    handleLogin = async () => {\n        const {email, password} = this.state\n        if(email.length === 0 || password.length === 0){\n            window.alert(\"Username or password cannot be blank\");\n        }\n        else {\n            try {\n                //log in the user using the given method from parse\n                await Parse.User.logIn(email.toString(), password.toString());\n\n                // get the current logged in objectId\n                const objectId = await Parse.User.current().id;\n\n                //query the cloud to get the name the person is assigned\n                const user = Parse.Object.extend(\"User\");\n                const query = new Parse.Query(user);\n                const queryResult = await query.get(objectId);\n                const usersName = queryResult.get('name');\n\n                //create a new userdata JSON with the info from the cloud\n                const userData ={\n                    name: usersName,\n                    email: email,\n                    password: password,\n                    UID: objectId\n                }\n\n                //update the users info and go to the home screen\n                this.context.updateUserData(userData)\n                this.props.navigation.replace('HomeStack', {screen: 'Home'})\n            }\n            catch (error){\n                window.alert(\"LoginError: \" + error.message)\n            }\n        }\n    }\n\n\n\n    static contextType = Context;\n    render() {\n        return (\n            <View style={styles.container}>\n                <Text style={styles.text} >Login Screen</Text>\n\n                {/* email text input for sign in */}\n                <TextInput\n                    style={styles.inputBox}\n                    value={this.state.email}\n                    onChangeText={email => this.setState({email})}\n                    placeholder='Email'\n                    autoCapitalize='none'\n                />\n\n                {/* password text input for sign in */}\n                <TextInput\n                    style={styles.inputBox}\n                    value={this.state.password}\n                    onChangeText={password => this.setState({password})}\n                    placeholder='Password'\n                    secureTextEntry={true}\n                />\n\n                {/*Button to log in*/}\n                <TouchableOpacity style={styles.button} onPress={this.handleLogin}>\n                    <Text style={styles.buttonText}>Login</Text>\n                </TouchableOpacity>\n\n                {/*Button to Sign up*/}\n                <Button title=\"signup\" onPress={() => this.props.navigation.navigate('Signup')}/>\n            </View>\n        );\n    }\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        alignItems: \"center\",\n        justifyContent: 'center',\n        backgroundColor: 'white',\n    },\n    text: {\n        fontSize: 50,\n        color: 'blue'\n    },\n    button: {\n        marginTop: 30,\n        marginBottom: 20,\n        paddingVertical: 5,\n        alignItems: 'center',\n        backgroundColor: '#F6820D',\n        borderColor: '#F6820D',\n        borderWidth: 1,\n        borderRadius: 5,\n        width: 200\n    },\n    buttonText: {\n        fontSize: 20,\n        fontWeight: 'bold',\n        color: '#fff'\n    },\n    inputBox: {\n        width: '85%',\n        margin: 10,\n        padding: 15,\n        fontSize: 16,\n        borderColor: '#d3d3d3',\n        borderBottomWidth: 1,\n        textAlign: 'center'\n    },\n    buttonSign: {\n        fontSize: 12\n    }\n});;\n\nexport default Auth;\n"]},"metadata":{},"sourceType":"module"}