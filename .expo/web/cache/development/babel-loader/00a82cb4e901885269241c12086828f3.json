{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/dustin/CMPT436/project-parse/views/Signup.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { AsyncStorage } from \"react-native-web/dist/index\";\nimport context, { UserDataContext } from \"../contextAPI/context\";\nimport { Parse } from \"parse/react-native\";\n\nvar Signup = function (_React$Component) {\n  _inherits(Signup, _React$Component);\n\n  var _super = _createSuper(Signup);\n\n  function Signup(navigation) {\n    var _this;\n\n    _classCallCheck(this, Signup);\n\n    _this = _super.call(this, navigation);\n    _this.state = {\n      name: '',\n      email: '',\n      password: ''\n    };\n\n    _this.handleSignUp = function _callee() {\n      var _this$state, name, email, password, user, result, userId, User, query, data;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _this$state = _this.state, name = _this$state.name, email = _this$state.email, password = _this$state.password;\n\n              if (!(name.trim() === \"\" || email.trim() === \"\" || password.trim() === \"\")) {\n                _context.next = 5;\n                break;\n              }\n\n              window.alert(\"Fields are not properly filled in\");\n              _context.next = 24;\n              break;\n\n            case 5:\n              _context.prev = 5;\n              Parse.User.logOut();\n              user = new Parse.User();\n              user.set(\"name\", name);\n              user.set(\"username\", email);\n              user.set(\"email\", email);\n              user.set(\"password\", password);\n              _context.next = 14;\n              return _regeneratorRuntime.awrap(user.signUp());\n\n            case 14:\n              result = _context.sent;\n              _context.next = 17;\n              return _regeneratorRuntime.awrap(AsyncStorage.setItem('sessionToken', result.getSessionToken()));\n\n            case 17:\n              _context.next = 19;\n              return _regeneratorRuntime.awrap(AsyncStorage.setItem('username', result.getUsername()));\n\n            case 19:\n              _context.next = 24;\n              break;\n\n            case 21:\n              _context.prev = 21;\n              _context.t0 = _context[\"catch\"](5);\n              window.alert(\"oops, something when wrong with the signup\");\n\n            case 24:\n              _context.next = 26;\n              return _regeneratorRuntime.awrap(Parse.User.current().id);\n\n            case 26:\n              userId = _context.sent;\n              User = Parse.Object.extend('User');\n              query = new Parse.Query(User);\n              _context.next = 31;\n              return _regeneratorRuntime.awrap(query.get(userId).then(function (user) {\n                user.set('uid', userId);\n                user.save();\n              }));\n\n            case 31:\n              data = {\n                name: _this.state.name,\n                email: _this.state.email,\n                password: _this.state.password,\n                UID: userId\n              };\n\n              _this.context.updateUserData(data);\n\n              _this.props.navigation.replace('HomeStack', {\n                screen: 'Home'\n              });\n\n            case 34:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[5, 21]], Promise);\n    };\n\n    return _this;\n  }\n\n  _createClass(Signup, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(View, {\n        style: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }\n      }, React.createElement(Text, {\n        style: styles.text,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 17\n        }\n      }, \"Signup Screen\"), React.createElement(TextInput, {\n        style: styles.inputBox,\n        value: this.state.name,\n        onChangeText: function onChangeText(name) {\n          return _this2.setState({\n            name: name\n          });\n        },\n        placeholder: \"Full Name\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 17\n        }\n      }), React.createElement(TextInput, {\n        style: styles.inputBox,\n        value: this.state.email,\n        onChangeText: function onChangeText(email) {\n          return _this2.setState({\n            email: email\n          });\n        },\n        placeholder: \"Email\",\n        autoCapitalize: \"none\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 17\n        }\n      }), React.createElement(TextInput, {\n        style: styles.inputBox,\n        value: this.state.password,\n        onChangeText: function onChangeText(password) {\n          return _this2.setState({\n            password: password\n          });\n        },\n        placeholder: \"Password\",\n        secureTextEntry: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 17\n        }\n      }), React.createElement(TouchableOpacity, {\n        style: styles.button,\n        onPress: this.handleSignUp,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 17\n        }\n      }, React.createElement(Text, {\n        style: styles.buttonText,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }\n      }, \"Signup\")));\n    }\n  }]);\n\n  return Signup;\n}(React.Component);\n\nSignup.contextType = context;\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  text: {\n    fontSize: 50,\n    color: 'blue'\n  },\n  inputBox: {\n    width: '85%',\n    margin: 10,\n    padding: 15,\n    fontSize: 16,\n    borderColor: '#d3d3d3',\n    borderBottomWidth: 1,\n    textAlign: 'center'\n  },\n  button: {\n    marginTop: 30,\n    marginBottom: 20,\n    paddingVertical: 5,\n    alignItems: 'center',\n    backgroundColor: '#FFA611',\n    borderColor: '#FFA611',\n    borderWidth: 1,\n    borderRadius: 5,\n    width: 200\n  },\n  buttonText: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: '#fff'\n  },\n  buttonSignup: {\n    fontSize: 12\n  }\n});\nexport default Signup;","map":{"version":3,"sources":["/home/dustin/CMPT436/project-parse/views/Signup.js"],"names":["React","AsyncStorage","context","UserDataContext","Parse","Signup","navigation","state","name","email","password","handleSignUp","trim","window","alert","User","logOut","user","set","signUp","result","setItem","getSessionToken","getUsername","current","id","userId","Object","extend","query","Query","get","then","save","data","UID","updateUserData","props","replace","screen","styles","container","text","inputBox","setState","button","buttonText","Component","contextType","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","fontSize","color","width","margin","padding","borderColor","borderBottomWidth","textAlign","marginTop","marginBottom","paddingVertical","borderWidth","borderRadius","fontWeight","buttonSignup"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {StyleSheet, Text, View, TextInput, TouchableOpacity, AsyncStorage} from 'react-native';\n\nimport context, {UserDataContext} from '../contextAPI/context';\nimport { Parse } from \"parse/react-native\";\n\nclass Signup extends React.Component {\n    static contextType = context\n    state = {\n        name: '',\n        email: '',\n        password: ''\n    }\n    constructor(navigation){\n        super(navigation)\n    }\n\n    handleSignUp = async () => {\n        const {name, email, password } = this.state\n        if (name.trim() === \"\" || email.trim() === \"\" || password.trim() === \"\" ){\n            window.alert(\"Fields are not properly filled in\");\n        }\n        else{\n            try{\n                //make sure we are starting fresh\n                Parse.User.logOut();\n\n                //create a new user, setting the fields\n                let user = new Parse.User();\n                user.set(\"name\", name);\n                user.set(\"username\", email);\n                user.set(\"email\", email);\n                user.set(\"password\", password);\n                //save the new user in teh cloud\n                const result = await user.signUp();\n\n                await AsyncStorage.setItem('sessionToken', result.getSessionToken());\n                await AsyncStorage.setItem('username', result.getUsername());\n            }\n            catch{\n                window.alert(\"oops, something when wrong with the signup\")\n            }\n        }\n        //add the uid to the assigned user\n        let userId = await Parse.User.current().id;\n        let User = Parse.Object.extend('User');\n        let query = new Parse.Query(User);\n        await query.get(userId).then(user => {\n            user.set('uid', userId);\n            user.save();\n        })\n\n        // save the new users data for the rest of the program\n        const data = {\n            name: this.state.name,\n            email: this.state.email,\n            password: this.state.password,\n            UID: userId\n        }\n\n        //update and switch to the home screen\n        this.context.updateUserData(data)\n        this.props.navigation.replace('HomeStack', {screen: 'Home'})\n    }\n\n    render() {\n        return (\n            <View style={styles.container}>\n                <Text style={styles.text} >Signup Screen</Text>\n                <TextInput\n                    style={styles.inputBox}\n                    value={this.state.name}\n                    onChangeText={name => this.setState({ name })}\n                    placeholder='Full Name'\n                />\n                <TextInput\n                    style={styles.inputBox}\n                    value={this.state.email}\n                    onChangeText={email => this.setState({ email })}\n                    placeholder='Email'\n                    autoCapitalize='none'\n                />\n                <TextInput\n                    style={styles.inputBox}\n                    value={this.state.password}\n                    onChangeText={password => this.setState({ password })}\n                    placeholder='Password'\n                    secureTextEntry={true}\n                />\n                <TouchableOpacity style={styles.button} onPress={this.handleSignUp}>\n                    <Text style={styles.buttonText}>Signup</Text>\n                </TouchableOpacity>\n            </View>\n        )\n    }\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        backgroundColor: '#fff',\n        alignItems: 'center',\n        justifyContent: 'center'\n    },\n    text: {\n        fontSize: 50,\n        color: 'blue'\n    },\n    inputBox: {\n        width: '85%',\n        margin: 10,\n        padding: 15,\n        fontSize: 16,\n        borderColor: '#d3d3d3',\n        borderBottomWidth: 1,\n        textAlign: 'center'\n    },\n    button: {\n        marginTop: 30,\n        marginBottom: 20,\n        paddingVertical: 5,\n        alignItems: 'center',\n        backgroundColor: '#FFA611',\n        borderColor: '#FFA611',\n        borderWidth: 1,\n        borderRadius: 5,\n        width: 200\n    },\n    buttonText: {\n        fontSize: 20,\n        fontWeight: 'bold',\n        color: '#fff'\n    },\n    buttonSignup: {\n        fontSize: 12\n    }\n})\n\nexport default Signup\n"]},"metadata":{},"sourceType":"module"}