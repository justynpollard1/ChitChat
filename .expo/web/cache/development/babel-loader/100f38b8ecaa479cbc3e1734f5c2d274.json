{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/dustin/CMPT436/project-parse/components/userSearch/UserCard.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { TouchableOpacity } from 'react-native-gesture-handler';\nimport Context from \"../../contextAPI/context\";\nimport { Parse } from \"parse/react-native\";\n\nvar UserCard = function (_React$Component) {\n  _inherits(UserCard, _React$Component);\n\n  var _super = _createSuper(UserCard);\n\n  function UserCard() {\n    var _this;\n\n    _classCallCheck(this, UserCard);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this.onNewUserPressed = function _callee() {\n      var currentUserID, userClickedOnID, ChatRoom, chatRoom, result, chatRoomID, user, query;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Parse.User.current().id);\n\n            case 2:\n              currentUserID = _context.sent;\n              userClickedOnID = _this.props.uid;\n              ChatRoom = Parse.Object.extend(\"ChatRooms\");\n              chatRoom = new ChatRoom();\n              chatRoom.set('users', [currentUserID, userClickedOnID]);\n              _context.next = 9;\n              return _regeneratorRuntime.awrap(chatRoom.save());\n\n            case 9:\n              result = _context.sent;\n              chatRoomID = result.id;\n              user = Parse.Object.extend(\"User\");\n              query = new Parse.Query(user);\n              _context.next = 15;\n              return _regeneratorRuntime.awrap(query.get(currentUserID).then(function (user) {\n                var chatRoomArray = user.get('ChatRooms');\n\n                if (chatRoomArray === undefined) {\n                  chatRoomArray = [];\n                }\n\n                chatRoomArray.push(chatRoomID);\n                user.set('ChatRooms', chatRoomArray);\n                user.save();\n              }));\n\n            case 15:\n              _context.next = 17;\n              return _regeneratorRuntime.awrap(query.get(userClickedOnID).then(function (user) {\n                var chatRoomArray = user.get('ChatRooms');\n\n                if (chatRoomArray === undefined) {\n                  chatRoomArray = [];\n                }\n\n                chatRoomArray.push(chatRoomID);\n                user.set('ChatRooms', chatRoomArray);\n                user.save();\n              }));\n\n            case 17:\n              window.alert(chatRoomID);\n\n              _this.props.navigation.navigate('Message', {\n                roomID: chatRoomID\n              });\n\n            case 19:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    return _this;\n  }\n\n  _createClass(UserCard, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }\n      }, React.createElement(TouchableOpacity, {\n        onPress: function onPress() {\n          return _this2.onNewUserPressed();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 17\n        }\n      }, React.createElement(View, {\n        style: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }\n      }, React.createElement(View, {\n        style: styles.text,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 29\n        }\n      }, React.createElement(Text, {\n        style: styles.nameText,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 55\n        }\n      }, this.props.name)))));\n    }\n  }]);\n\n  return UserCard;\n}(React.Component);\n\nUserCard.contextType = Context;\nexport { UserCard as default };\nvar styles = StyleSheet.create({\n  container: {\n    paddingTop: 20,\n    paddingHorizontal: 30,\n    flexDirection: 'column',\n    backgroundColor: '#FFFFFF',\n    width: Dimensions.get('window').width,\n    height: 100,\n    margin: 10,\n    borderBottomWidth: 0.5,\n    borderColor: \"#CFCFCF\",\n    borderStyle: \"solid\"\n  },\n  text: {\n    height: 30,\n    width: 200,\n    flexDirection: 'column'\n  },\n  nameText: {\n    fontWeight: \"400\",\n    color: \"black\",\n    fontSize: 20\n  }\n});","map":{"version":3,"sources":["/home/dustin/CMPT436/project-parse/components/userSearch/UserCard.js"],"names":["React","TouchableOpacity","Context","Parse","UserCard","onNewUserPressed","User","current","id","currentUserID","userClickedOnID","props","uid","ChatRoom","Object","extend","chatRoom","set","save","result","chatRoomID","user","query","Query","get","then","chatRoomArray","undefined","push","window","alert","navigation","navigate","roomID","styles","container","text","nameText","name","Component","contextType","StyleSheet","create","paddingTop","paddingHorizontal","flexDirection","backgroundColor","width","Dimensions","height","margin","borderBottomWidth","borderColor","borderStyle","fontWeight","color","fontSize"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {View, StyleSheet, Dimensions, Text} from 'react-native';\nimport { TouchableOpacity } from 'react-native-gesture-handler';\nimport Context from '../../contextAPI/context';\nimport { Parse } from \"parse/react-native\";\n\n\n\nexport default class UserCard extends React.Component {\n    static contextType = Context\n\n    onNewUserPressed = async() => {\n        let currentUserID = await Parse.User.current().id;\n        let userClickedOnID = this.props.uid;\n\n        //create new chatroom and save my userName + the clicked on persons username\n        const ChatRoom = Parse.Object.extend(\"ChatRooms\");\n        const chatRoom = new ChatRoom();\n        chatRoom.set('users', [currentUserID, userClickedOnID])\n        const result = await chatRoom.save();\n\n        const chatRoomID = result.id;\n\n\n        const user = Parse.Object.extend(\"User\");\n        const query = new Parse.Query(user);\n\n        //add ChatRoom ID to the current user\n        await query.get(currentUserID).then(user => {\n            let chatRoomArray = user.get('ChatRooms');\n            //create an array if it doesn't exist\n            if(chatRoomArray === undefined){\n                chatRoomArray = []\n            }\n            chatRoomArray.push(chatRoomID);\n            user.set('ChatRooms', chatRoomArray);\n            user.save();\n        })\n\n        //add message room to the user Clicked on\n        await query.get(userClickedOnID).then(user => {\n            let chatRoomArray = user.get('ChatRooms');\n            //create an array if it doesn't exist\n            if(chatRoomArray === undefined){\n                chatRoomArray = []\n            }\n            chatRoomArray.push(chatRoomID);\n            user.set('ChatRooms', chatRoomArray);\n            user.save();\n        })\n        window.alert(chatRoomID);\n        this.props.navigation.navigate('Message', {roomID: chatRoomID})\n    }\n\n    render(){\n        return(\n            <View>\n                <TouchableOpacity onPress={() => this.onNewUserPressed()}>\n                    <View style={styles.container}>\n                            <View style={styles.text}><Text style={styles.nameText}>{this.props.name}</Text></View>\n                    </View>\n                </TouchableOpacity>\n            </View>\n        )\n    }\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        paddingTop: 20,\n        paddingHorizontal: 30,\n        flexDirection: 'column',\n        backgroundColor: '#FFFFFF',\n        width: Dimensions.get('window').width,\n        height: 100,\n        margin: 10,\n        borderBottomWidth: 0.5,\n        borderColor: \"#CFCFCF\",\n        borderStyle: \"solid\",\n    },\n    text: {\n        height: 30,\n        width: 200,\n        flexDirection: 'column'\n    },\n    nameText: {\n        fontWeight: \"400\",\n        color: \"black\",\n        fontSize: 20,\n    }\n})\n"]},"metadata":{},"sourceType":"module"}