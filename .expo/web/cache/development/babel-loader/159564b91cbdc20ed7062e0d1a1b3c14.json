{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/dustin/CMPT436/project-parse/components/MessageDisplay/MessageScroll.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport View from \"react-native-web/dist/exports/View\";\nimport MessageCard from \"./MessageCard\";\nimport { Parse } from \"parse/react-native\";\n\nvar MessageScroll = function (_Component) {\n  _inherits(MessageScroll, _Component);\n\n  var _super = _createSuper(MessageScroll);\n\n  function MessageScroll(props) {\n    var _this;\n\n    _classCallCheck(this, MessageScroll);\n\n    _this = _super.call(this, props);\n\n    _this.getMessages = function _callee(chatID) {\n      var chatRoomQuery, chatRoomQueryResult, messages, messageArray, i, query, queryResult, name, messageInfo;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              chatRoomQuery = new Parse.Query(Parse.Object.extend(\"ChatRooms\"));\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(chatRoomQuery.get(chatID));\n\n            case 3:\n              chatRoomQueryResult = _context.sent;\n              messages = chatRoomQueryResult.get('messages');\n              messageArray = [];\n              i = 0;\n\n            case 7:\n              if (!(i < messages.length)) {\n                _context.next = 18;\n                break;\n              }\n\n              query = new Parse.Query(Parse.Object.extend(\"User\"));\n              _context.next = 11;\n              return _regeneratorRuntime.awrap(query.get(messages[i].uid));\n\n            case 11:\n              queryResult = _context.sent;\n              name = queryResult.get('name');\n              messageInfo = {\n                sender: name,\n                msg: messages[i].msg,\n                timeSent: messages[i].timeSent\n              };\n              messageArray.push(messageInfo);\n\n            case 15:\n              i++;\n              _context.next = 7;\n              break;\n\n            case 18:\n              _this.setState({\n                messages: messageArray\n              });\n\n            case 19:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.messageObserver = function () {\n      var subscription = _this.state.queryClient.subscribe(_this.state.liveQuery);\n\n      subscription.on('update', function (object) {\n        if (object.id === _this.state.roomID) {\n          _this.getMessages(_this.state.roomID);\n        }\n      });\n    };\n\n    _this.state = {\n      roomID: _this.props.chatID,\n      messages: [],\n      queryClient: \"\",\n      liveQuery: \"\"\n    };\n    var liveQueryClient = new Parse.LiveQueryClient({\n      applicationId: 'kYSoaP9C7d9JujPHMbZ4AIhtBTmmDIevX42cMQG6',\n      serverURL: 'wss://' + 'chitchat.b4a.io',\n      javascriptKey: 'V1eJ6EjksQ6B95OJzOjTQBu0BNFjJIVw2YSkp9BS'\n    });\n    liveQueryClient.open();\n    _this.state.queryClient = liveQueryClient;\n    _this.state.liveQuery = new Parse.Query(\"ChatRooms\");\n    return _this;\n  }\n\n  _createClass(MessageScroll, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getMessages(this.state.roomID);\n      this.messageObserver();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.state.queryClient.unsubscribe(this.state.liveQuery);\n      this.messageObserver();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(ScrollView, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }\n      }, React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 17\n        }\n      }, this.state.messages.map(function (message) {\n        return React.createElement(MessageCard, {\n          sender: message.sender,\n          message: message.msg,\n          timeSent: new Date(message.timeSent.seconds).toUTCString(),\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 25\n          }\n        });\n      })));\n    }\n  }]);\n\n  return MessageScroll;\n}(Component);\n\nexport { MessageScroll as default };","map":{"version":3,"sources":["/home/dustin/CMPT436/project-parse/components/MessageDisplay/MessageScroll.js"],"names":["React","Component","MessageCard","Parse","MessageScroll","props","getMessages","chatID","chatRoomQuery","Query","Object","extend","get","chatRoomQueryResult","messages","messageArray","i","length","query","uid","queryResult","name","messageInfo","sender","msg","timeSent","push","setState","messageObserver","subscription","state","queryClient","subscribe","liveQuery","on","object","id","roomID","liveQueryClient","LiveQueryClient","applicationId","serverURL","javascriptKey","open","unsubscribe","map","message","Date","seconds","toUTCString"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\n\nimport {ScrollView, View} from 'react-native';\nimport MessageCard from './MessageCard'\nimport {Parse} from \"parse/react-native\";\n\n\nexport default class MessageScroll extends Component {\n    constructor(props){\n        super(props)\n        this.state= {\n            roomID: this.props.chatID,\n            messages: [],\n            queryClient: \"\",\n            liveQuery: \"\",\n        }\n        let liveQueryClient = new Parse.LiveQueryClient({\n            applicationId: 'kYSoaP9C7d9JujPHMbZ4AIhtBTmmDIevX42cMQG6',\n            serverURL: 'wss://' + 'chitchat.b4a.io',\n            javascriptKey: 'V1eJ6EjksQ6B95OJzOjTQBu0BNFjJIVw2YSkp9BS'\n        });\n        liveQueryClient.open();\n        this.state.queryClient = liveQueryClient;\n        this.state.liveQuery = new Parse.Query(\"ChatRooms\");\n    }\n\n    //\n    componentDidMount() {\n        this.getMessages(this.state.roomID);\n        this.messageObserver();\n    }\n\n    componentWillUnmount(){\n        this.state.queryClient.unsubscribe(this.state.liveQuery);\n        this.messageObserver();\n    }\n\n    getMessages = async (chatID) => {\n        //get the messages from the chatroom we got called with\n        const chatRoomQuery = new Parse.Query(Parse.Object.extend(\"ChatRooms\"));\n        const chatRoomQueryResult = await chatRoomQuery.get(chatID);\n        const messages = chatRoomQueryResult.get('messages');\n\n        // create our own array of objects from the response\n        const messageArray = []\n        for (let i = 0; i < messages.length; i++) {\n            //query to get the users name from the cloud that sent the message\n            const query = new Parse.Query(Parse.Object.extend(\"User\"));\n            const queryResult = await query.get(messages[i].uid);\n            const name = queryResult.get('name');\n\n            //create a new message to push to messageArray\n            const messageInfo = {\n                sender: name,\n                msg: messages[i].msg,\n                timeSent: messages[i].timeSent\n            }\n            messageArray.push(messageInfo)\n\n          }\n\n        this.setState({messages: messageArray})\n    }\n\n    /*Subscribe to the ChatRooms, it will ping on any chatroom being changed,\n    haven't figured otu how to subscribe to a single object*/\n    messageObserver = () => {\n        let subscription = this.state.queryClient.subscribe(this.state.liveQuery);\n        subscription.on('update', (object) =>{\n            if(object.id === this.state.roomID){\n                this.getMessages(this.state.roomID);\n            }\n        })\n    }\n\n    render(){\n        return (\n            <ScrollView>\n                <View>\n                    {this.state.messages.map((message) => (\n                        <MessageCard\n                        sender={message.sender}\n                        message={message.msg}\n                        /*still not perfect, says 1970*/\n                        timeSent={(new Date(message.timeSent.seconds)).toUTCString()}/>\n                    ))}\n                </View>\n            </ScrollView>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}