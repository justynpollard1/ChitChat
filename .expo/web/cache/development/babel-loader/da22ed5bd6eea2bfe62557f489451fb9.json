{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/home/dustin/CMPT436/project-parse/views/Message.js\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport MessageScroll from \"../components/MessageDisplay/MessageScroll\";\nimport { TextInput } from \"react-native-gesture-handler\";\nimport { Parse } from \"parse/react-native\";\nimport win from \"react-native-web/dist/exports/Dimensions\";\n\nvar Message = function (_React$Component) {\n  _inherits(Message, _React$Component);\n\n  var _super = _createSuper(Message);\n\n  function Message(props) {\n    var _this;\n\n    _classCallCheck(this, Message);\n\n    _this = _super.call(this, props);\n\n    _this.sendMessage = function _callee(e) {\n      var currentUserID, Messages, messages, result, messageID, query, queryResult, timestamp, newMessage, chatRoomQuery;\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              e.preventDefault();\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(Parse.User.current().id);\n\n            case 3:\n              currentUserID = _context.sent;\n              Messages = Parse.Object.extend(\"messages\");\n              messages = new Messages();\n              messages.set('uid', currentUserID);\n              messages.set('msg', _this.state.message);\n              _context.next = 10;\n              return _regeneratorRuntime.awrap(messages.save());\n\n            case 10:\n              result = _context.sent;\n              messageID = result.id;\n              query = new Parse.Query(Messages);\n              _context.next = 15;\n              return _regeneratorRuntime.awrap(query.get(messageID));\n\n            case 15:\n              queryResult = _context.sent;\n              timestamp = queryResult.get('createdAt');\n              newMessage = {\n                mid: messageID,\n                msg: _this.state.message,\n                timeSent: timestamp,\n                uid: currentUserID\n              };\n              chatRoomQuery = new Parse.Query(Parse.Object.extend(\"ChatRooms\"));\n              _context.next = 21;\n              return _regeneratorRuntime.awrap(chatRoomQuery.get(_this.state.chatID).then(function (room) {\n                var messageArray = room.get('messages');\n\n                if (messageArray === undefined) {\n                  messageArray = [];\n                }\n\n                messageArray.push(newMessage);\n                room.set('messages', messageArray);\n                room.save();\n              }));\n\n            case 21:\n              _this.setState({\n                message: ''\n              });\n\n              _this.props.navigation.navigate('Message', {\n                roomID: _this.state.roomID\n              });\n\n            case 23:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.props = props;\n    _this.state = {\n      chatID: _this.props.route.params.roomID,\n      message: ''\n    };\n    return _this;\n  }\n\n  _createClass(Message, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(View, {\n        style: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }\n      }, React.createElement(MessageScroll, {\n        chatID: this.state.chatID,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 17\n        }\n      }), React.createElement(TextInput, {\n        style: styles.input,\n        value: this.state.message,\n        onChangeText: function onChangeText(message) {\n          return _this2.setState({\n            message: message\n          });\n        },\n        placeholder: \"message to send\",\n        autoCapitalize: \"none\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 17\n        }\n      }), React.createElement(TouchableOpacity, {\n        style: styles.button,\n        onPress: this.sendMessage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 17\n        }\n      }, React.createElement(Text, {\n        style: styles.buttonText,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }\n      }, \"Send Message\")), React.createElement(TouchableOpacity, {\n        style: styles.button,\n        onPress: function onPress() {\n          return _this2.props.navigation.navigate('AddPersonToChat', {\n            roomID: _this2.state.chatID\n          });\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 17\n        }\n      }, React.createElement(Text, {\n        style: styles.buttonText,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 21\n        }\n      }, \"Add Person To Chat\")), React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 17\n        }\n      }, \"Messages\"));\n    }\n  }]);\n\n  return Message;\n}(React.Component);\n\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white'\n  },\n  text: {\n    fontSize: 50,\n    color: 'blue'\n  },\n  input: {\n    bottom: 0,\n    fontSize: 50,\n    color: 'blue'\n  },\n  buttonText: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: 'black'\n  },\n  button: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    color: '#fff',\n    borderWidth: 5\n  }\n});\nexport default Message;","map":{"version":3,"sources":["/home/dustin/CMPT436/project-parse/views/Message.js"],"names":["React","MessageScroll","TextInput","Parse","win","Message","props","sendMessage","e","preventDefault","User","current","id","currentUserID","Messages","Object","extend","messages","set","state","message","save","result","messageID","query","Query","get","queryResult","timestamp","newMessage","mid","msg","timeSent","uid","chatRoomQuery","chatID","then","room","messageArray","undefined","push","setState","navigation","navigate","roomID","route","params","styles","container","input","button","buttonText","Component","StyleSheet","create","backgroundColor","text","fontSize","color","bottom","fontWeight","borderWidth"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {StyleSheet, Text, View, TouchableOpacity, Button} from 'react-native';\nimport MessageScroll from '../components/MessageDisplay/MessageScroll'\nimport {TextInput} from \"react-native-gesture-handler\";\nimport {Parse} from \"parse/react-native\";\nimport win from \"react-native-web/dist/exports/Dimensions\";\n\nclass Message extends React.Component{\n    constructor(props) {\n        super(props);\n        this.props = props;\n        this.state = {\n            chatID: this.props.route.params.roomID,\n            message: ''\n        }\n    }\n\n    sendMessage = async e => {\n        e.preventDefault();\n        let currentUserID = await Parse.User.current().id;\n\n        // add message to the db\n        const Messages = Parse.Object.extend(\"messages\");\n        const messages = new Messages();\n        messages.set('uid', currentUserID);\n        messages.set('msg', this.state.message);\n        const result = await messages.save();\n        const messageID = result.id;\n\n\n        //get the timestamp from the created message\n        const query = new Parse.Query(Messages);\n        const queryResult = await query.get(messageID);\n        const timestamp = queryResult.get('createdAt');\n\n        //create message to send to chat\n        const newMessage = {\n            mid: messageID,\n            msg: this.state.message,\n            timeSent: timestamp,\n            uid: currentUserID\n        }\n\n        //query the cloud, add the message and save it\n        const chatRoomQuery = new Parse.Query(Parse.Object.extend(\"ChatRooms\"));\n        await chatRoomQuery.get(this.state.chatID).then( room => {\n            let messageArray = room.get('messages');\n            if(messageArray === undefined){\n                messageArray = [];\n            }\n            messageArray.push(newMessage);\n            room.set('messages', messageArray);\n            room.save();\n        })\n\n        //reset the state\n        this.setState({\n            message: '',\n        })\n        this.props.navigation.navigate('Message', {roomID: this.state.roomID})\n    };\n\n    render() {\n        return (\n            <View style={styles.container}>\n                <MessageScroll chatID={this.state.chatID}/>\n\n                <TextInput\n                    style={styles.input}\n                    value={this.state.message}\n                    onChangeText={message => this.setState({message})}\n                    placeholder='message to send'\n                    autoCapitalize='none'\n                />\n\n                <TouchableOpacity style={styles.button} onPress={this.sendMessage}>\n                    <Text style={styles.buttonText}>Send Message</Text>\n                </TouchableOpacity>\n\n                <TouchableOpacity style={styles.button} onPress={() => this.props.navigation.navigate('AddPersonToChat', {roomID: this.state.chatID})}>\n                    <Text style={styles.buttonText}>Add Person To Chat</Text>\n                </TouchableOpacity>\n                <Text>Messages</Text>\n\n            </View>\n        );\n    }\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        backgroundColor: 'white',\n    },\n    text: {\n        fontSize: 50,\n        color: 'blue'\n    },\n    input: {\n        bottom: 0,\n        fontSize: 50,\n        color: 'blue'\n    },\n    buttonText: {\n        fontSize: 20,\n        fontWeight: 'bold',\n        color: 'black'\n    },\n    button: {\n        fontSize: 20,\n        fontWeight: 'bold',\n        color: '#fff',\n        borderWidth: 5\n    }\n});\n\nexport default Message;\n"]},"metadata":{},"sourceType":"module"}